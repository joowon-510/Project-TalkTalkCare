worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 공통 CORS 설정을 http 블록 안에 정의
    map $http_origin $cors_origin {
        default "";
        "https://talktalkcare.com" "$http_origin";
        "https://www.talktalkcare.com" "$http_origin";
    }

    upstream backend-server {
        server backend:8080;
    }

    upstream openvidu-server {
        server openvidu:443;
    }

    # HTTP -> HTTPS 리다이렉트
    server {
        listen 80;
        server_name talktalkcare.com www.talktalkcare.com;
        return 301 https://$host$request_uri;
    }

    # HTTPS 설정
    server {
        listen 443 ssl;
        server_name talktalkcare.com www.talktalkcare.com;

        ssl_certificate /etc/letsencrypt/live/talktalkcare.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/talktalkcare.com/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # 프론트엔드 라우트를 위한 설정
        location /openvidu-test {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # WebRTC 시그널링
        location /webrtc {
            proxy_pass https://openvidu:443;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400;
        }

        # WebSocket 연결을 백엔드로 프록시
        location /ws {
            proxy_pass http://backend:8080;  # 도커 네트워크 내부 통신
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 86400;
        }

        # WebSocket 연결을 백엔드로 프록시
        location /api/talktalkcare {
            proxy_pass http://backend-server;  # 도커 네트워크 내부 통신
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 86400;
        }

        # 백엔드 API 요청 처리: /api 이하 요청은 그대로 백엔드로 전달
        location /api/ {
            proxy_pass http://backend-server;  # trailing slash 없음!
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # CORS 관련 헤더 설정 등 (필요하면 추가)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # OpenVidu WebSocket 및 API 요청
        location /openvidu {
            proxy_pass https://openvidu-server;  # 도커 내부 통신
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 설정
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 86400;
            proxy_buffering off;
            proxy_cache off;
            proxy_ssl_verify off;
            
            # CORS 설정
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # OpenVidu API 전용 경로 - 동일한 CORS 설정 적용
        location /openvidu/api {
            proxy_pass https://openvidu-server;
            proxy_ssl_verify off;
            proxy_set_header Host $host;
            
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Kurento Media Server WebSocket
        location /kurento {
            proxy_pass http://openvidu:8888/kurento;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_ssl_verify off;
        }

        # 기본 프론트엔드 요청 처리
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
    }
}
